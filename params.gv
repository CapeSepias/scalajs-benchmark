digraph G {
rankdir=LR

{ node[style=filled fillcolor="#e6e6ff"]
header
render [label="RenderValue A\nA => TagMod"]
initValues [label="initValues A\nVector A"]
editor [label="Editor B\nExternalVar B => ReactElement"]
prism [label="Prism B (Vector A)"]

Param [label="Param A"]
header,render,initValues,editor,prism -> Param [dir=back]
}

genEditor [label="GenEditor\nExternalVar GenState => TagMod"]

{ node[style=filled fillcolor="#33cc33"]
gs [label="GenState"]
gs -> gs
GOAL_Params [label="Params"]
GOAL_editors [label="[ Headerₙ * GenEditorₙ ]"]
initStateNeeds [label="[ Key Bₙ *\ninitValues Aₙ *\nPrism Bₙ (Vector Aₙ) ]"]
editorNeeds [label="[ Headerₙ *\nKey Bₙ *\nEditor Bₙ ]"]
parseNeeds [label="apply *\n[ Headerₙ *\nKey Bₙ *\nPrism Bₙ (Vector Aₙ) ]"]

GOAL_parse [label="GenState => Header | Vector P"]
apply [label="apply\n(A₁,…,Aₙ) => P"]


edge [color=red fontcolor=red]
GOAL_Params -> initStateNeeds [label="initialState"]
initStateNeeds -> gs [label="fold"]
GOAL_Params -> editorNeeds [label="editor"]
editorNeeds -> GOAL_editors
GOAL_Params -> parseNeeds [label="parse"]
parseNeeds -> apply,GOAL_parse

edge [style=dashed color=red]
}

tup_HKP [label="Header *\nKey B *\nPrism B (Vector A)"]
parseOne [label="GenState => Header | Vector A"]
parseNeeds -> tup_HKP -> parseOne,header,key,prism

// PKeys [label="∀ B ⊂ P.Bs : Key[B]"]
PKeys [label="[Key Bₙ]"]
GOAL_Params -> PKeys

tup_initValuesPrism [label="initValues A * Prism B (Vector A)"]
tup_initValuesPrism -> sb,initValues,prism
sb [label="State B"]
key [label="Key B\nLens GenState B"]
tup_keyGS [label="Key B * GenState"]
tup_keyGS -> sb [label="get"]
tup_keyGS -> gs,key
tup_keyGSB [label="Key B * GenState * B"]
tup_keyGSB -> gs [label="set"]
tup_keyGSB -> key,sb
tup_keyGSB -> tup_keyGS [constraint=false]

initStateNeeds-> key,prism,initValues,PKeys,tup_keyGSB,tup_initValuesPrism

editorNeeds -> header,tup_keyEd,PKeys
GOAL_editors -> header,genEditor
tup_keyEd [label="Key B * Editor B"]
tup_keyEd -> key,editor,genEditor

}
